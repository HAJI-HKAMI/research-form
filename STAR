<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نواة خالد: المجرة التفاعلية المنفذة</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #00000a;
            color: #E5E7EB;
        }
        #galaxy-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            cursor: grab;
        }
        #galaxy-container:active {
            cursor: grabbing;
        }
        .ui-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 2rem;
        }
        .ui-element, .planet-label, .modal-content {
            pointer-events: auto;
        }
        .planet-label {
            position: absolute;
            color: white;
            background: rgba(0, 0, 0, 0.6);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            transform: translate(-50%, -50%);
            cursor: pointer;
            transition: opacity 0.3s, transform 0.3s, color 0.3s, text-shadow 0.3s;
            white-space: nowrap;
        }
        .planet-label:hover {
            transform: translate(-50%, -50%) scale(1.1);
            color: #93c5fd; /* Light blue on hover */
            text-shadow: 0 0 8px #93c5fd;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(8px);
            z-index: 100;
            display: none;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .modal.active {
            display: flex;
            opacity: 1;
        }
        .modal-content {
            background: rgba(17, 24, 39, 0.85);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1.5rem;
            padding: 2rem;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.95);
            transition: transform 0.3s ease;
        }
        .modal.active .modal-content {
            transform: scale(1);
        }
        .ai-button {
            transition: all 0.2s ease;
        }
        .ai-button:hover {
            transform: translateY(-2px);
        }
    </style>
</head>
<body>

    <div id="galaxy-container"></div>

    <div class="ui-overlay">
        <header class="text-center ui-element">
            <h1 class="text-4xl md:text-5xl font-bold text-white" style="text-shadow: 0 0 15px rgba(59, 130, 246, 0.8);">نواة خالد</h1>
            <p class="text-xl text-blue-300 mt-2">مجرة الاكتشاف التفاعلية</p>
        </header>

        <footer class="text-center text-xs text-gray-500 ui-element">
            <p>استخدم الفأرة للتنقل في المجرة. انقر على الكواكب لاستكشافها.</p>
        </footer>
    </div>
    
    <div id="content-modal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-6 border-b border-gray-700 pb-4">
                <h2 id="modal-title" class="text-3xl font-bold"></h2>
                <button id="close-modal" class="text-3xl font-bold text-gray-400 hover:text-white">&times;</button>
            </div>
            <div id="modal-body" class="prose prose-invert max-w-none"></div>
            <div id="gemini-output" class="mt-6 p-4 bg-gray-900/50 rounded-lg text-gray-300 hidden"></div>
        </div>
    </div>


<script>
// --- THREE.JS GALAXY SETUP ---
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setClearColor(0x000000, 0);
document.getElementById('galaxy-container').appendChild(renderer.domElement);

// --- Starfield Background ---
const starVertices = [];
for (let i = 0; i < 20000; i++) {
    const x = (Math.random() - 0.5) * 3000;
    const y = (Math.random() - 0.5) * 3000;
    const z = (Math.random() - 0.5) * 3000;
    starVertices.push(x, y, z);
}
const starGeometry = new THREE.BufferGeometry();
starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
const starMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.8 });
const stars = new THREE.Points(starGeometry, starMaterial);
scene.add(stars);

// --- Central Sun (Nucleus) ---
const sunGeometry = new THREE.SphereGeometry(10, 64, 64);
const sunMaterial = new THREE.MeshBasicMaterial({ 
    color: 0xffdd00, 
    wireframe: true,
    transparent: true,
    opacity: 0.8
});
const sun = new THREE.Mesh(sunGeometry, sunMaterial);
scene.add(sun);

// --- Planets Data (Inspired by user's images) ---
const planetsData = [
    { 
        name: 'معالجة اللغات الطبيعية', color: 0xEF4444, radius: 3, orbitRadius: 40, speed: 0.005,
        content: {
            description: "هذا الكوكب هو موطن الذكاء الذي يفهم ويتفاعل مع لغة البشر. هنا، نقوم بتحليل النصوص، فهم مشاعرها، ترجمتها، والإجابة على الأسئلة.",
            tasks: [
                { name: 'تصنيف النصوص', models: 'BERT, RoBERTa', type: 'نص -> تصنيف' },
                { name: 'الترجمة الآلية', models: 'MarianMT, M2M100', type: 'نص -> نص' },
                { name: 'التعرف على الكلام (STT)', models: 'Whisper, wav2vec2', type: 'صوت -> نص' },
                { name: 'تحويل النص إلى كلام (TTS)', models: 'ESPNet-TTS, Bark', type: 'نص -> صوت' }
            ]
        } 
    },
    { 
        name: 'الرؤية الحاسوبية', color: 0x3B82F6, radius: 4, orbitRadius: 65, speed: 0.003,
        content: {
            description: "كوكب الإدراك البصري. النماذج هنا تتعلم 'رؤية' العالم كما نراه، وتتعرف على الكائنات، وتفهم محتوى الصور والفيديوهات.",
            tasks: [
                { name: 'تصنيف الصور', models: 'ResNet, ViT', type: 'صورة -> تصنيف' },
                { name: 'اكتشاف الكائنات', models: 'YOLO, DETR', type: 'صورة -> مربعات محيطة' },
                { name: 'تحويل النص إلى صورة', models: 'Stable Diffusion, DALL-E', type: 'نص -> صورة' },
                { name: 'تحويل النص إلى فيديو', models: 'AnimateDiff', type: 'نص -> فيديو' }
            ]
        }
    },
    { 
        name: 'الذكاء متعدد الوسائط', color: 0x10B981, radius: 3.5, orbitRadius: 90, speed: 0.002,
        content: {
            description: "هذا هو كوكب التناغم، حيث تلتقي الحواس. النماذج هنا تفهم العلاقات بين النصوص والصور والأصوات، مما يخلق فهماً أكثر شمولية للعالم.",
            tasks: [
                { name: 'الإجابة على الأسئلة المرئية (VQA)', models: 'BLIP, OFA', type: 'صورة + سؤال -> جواب' },
                { name: 'شرح الصور (Image Captioning)', models: 'BLIP, Flamingo', type: 'صورة -> نص وصفي' },
                { name: 'تحويل الكلام المشفوع بالصور إلى نص', models: 'Whisper (مع سياق مرئي)', type: 'صوت + صورة -> نص' }
            ]
        }
    },
     { 
        name: 'التعلم المعزز والحوكمة', color: 0xF59E0B, radius: 2.5, orbitRadius: 115, speed: 0.0015,
        content: {
            description: "كوكب اتخاذ القرار الاستراتيجي. هنا، تتعلم النماذج من خلال التجربة والمكافأة، وتُستخدم لبناء أنظمة ذكية ذاتية التحكم وروبوتات، وتطبيق مبادئ الحوكمة عليها.",
            tasks: [
                { name: 'التعلم المعزز', models: 'Stable-Baselines3', type: 'بيئة + إجراء -> مكافأة' },
                { name: 'الروبوتات', models: 'Robotics Transformers', type: 'مدخلات حسية -> حركة' },
                { name: 'حوكمة الذكاء الاصطناعي', models: 'أطر نظرية (لا توجد نماذج محددة)', type: 'نظام ذكاء اصطناعي -> تقييم أخلاقي' }
            ]
        }
    },
    { 
        name: 'البيانات الجدولية والكمية', color: 0xA78BFA, radius: 3.2, orbitRadius: 140, speed: 0.001,
        content: {
            description: "كوكب الأرقام والمنطق. هنا نتعامل مع البيانات المنظمة في جداول، ونقوم ببناء نماذج تنبؤية دقيقة للمشاكل المالية، الطبية، والتجارية.",
            tasks: [
                { name: 'التصنيف الجدولي', models: 'TabNet, XGBoost, LightGBM', type: 'جدول بيانات -> تصنيف' },
                { name: 'الانحدار الجدولي', models: 'Linear Regression, K-ER', type: 'جدول بيانات -> قيمة رقمية' }
            ]
        }
    }
];

const planets = [];
planetsData.forEach(pData => {
    const geometry = new THREE.SphereGeometry(pData.radius, 32, 32);
    const material = new THREE.MeshStandardMaterial({ color: pData.color, roughness: 0.5, metalness: 0.3 });
    const planet = new THREE.Mesh(geometry, material);
    planet.userData = { ...pData, angle: Math.random() * Math.PI * 2 };
    planets.push(planet);
    scene.add(planet);

    const label = document.createElement('div');
    label.className = 'planet-label';
    label.textContent = pData.name;
    label.style.display = 'none';
    document.body.appendChild(label);
    planet.userData.label = label;

    label.addEventListener('click', (e) => {
        e.stopPropagation();
        openModal(pData);
        // Zoom in on the planet
        gsap.to(camera.position, {
            duration: 1.5,
            x: planet.position.x + pData.orbitRadius * 0.4,
            y: planet.position.y + 10,
            z: planet.position.z + pData.radius + 20,
            ease: "power2.inOut"
        });
        gsap.to(camera.rotation, {
            duration: 1.5,
            // A simple lookAt is complex, so we just center the view a bit
            x: camera.rotation.x,
            y: camera.rotation.y,
            z: camera.rotation.z,
            ease: "power2.inOut"
        });
    });
});

const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
scene.add(ambientLight);
const pointLight = new THREE.PointLight(0xffffff, 2, 1000);
pointLight.position.set(0, 0, 0);
scene.add(pointLight);

camera.position.z = 100;

let mouseX = 0, mouseY = 0;
let targetX = 0, targetY = 0;
const windowHalfX = window.innerWidth / 2;
const windowHalfY = window.innerHeight / 2;

document.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX - windowHalfX);
    mouseY = (event.clientY - windowHalfY);
});

function animate() {
    requestAnimationFrame(animate);
    targetX = mouseX * 0.0005;
    targetY = mouseY * 0.0005;
    camera.rotation.y += 0.05 * (targetX - camera.rotation.y);
    camera.rotation.x += 0.05 * (targetY - camera.rotation.x);
    sun.rotation.y += 0.005;
    
    planets.forEach(planet => {
        planet.userData.angle += planet.userData.speed;
        planet.position.x = Math.cos(planet.userData.angle) * planet.userData.orbitRadius;
        planet.position.z = Math.sin(planet.userData.angle) * planet.userData.orbitRadius;
        planet.rotation.y += 0.01;

        const vector = new THREE.Vector3();
        planet.getWorldPosition(vector);
        const screenVector = vector.project(camera);
        const x = (screenVector.x * windowHalfX) + windowHalfX;
        const y = -(screenVector.y * windowHalfY) + windowHalfY;

        if (screenVector.z < 1) {
            planet.userData.label.style.display = 'block';
            planet.userData.label.style.left = `${x}px`;
            planet.userData.label.style.top = `${y}px`;
        } else {
            planet.userData.label.style.display = 'none';
        }
    });
    renderer.render(scene, camera);
}

const modal = document.getElementById('content-modal');
const modalTitle = document.getElementById('modal-title');
const modalBody = document.getElementById('modal-body');
const closeModalBtn = document.getElementById('close-modal');
const geminiOutputDiv = document.getElementById('gemini-output');

function openModal(planetData) {
    modalTitle.textContent = planetData.name;
    let bodyHTML = `<p class="text-lg text-gray-300 mb-6">${planetData.content.description}</p>`;
    
    bodyHTML += `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">`;
    planetData.content.tasks.forEach(task => {
        bodyHTML += `
            <div class="p-4 bg-gray-900/70 rounded-lg">
                <h4 class="font-bold text-blue-300">${task.name}</h4>
                <p class="text-sm text-gray-400">النماذج: ${task.models}</p>
                <p class="text-xs font-mono text-gray-500">${task.type}</p>
                <button class="ai-button text-xs mt-2 bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded-md" onclick="explainTask('${task.name}', '${task.models}')">✨ اشرح المزيد</button>
            </div>
        `;
    });
    bodyHTML += `</div>`;
    modalBody.innerHTML = bodyHTML;
    geminiOutputDiv.classList.add('hidden');
    modal.classList.add('active');
}

function closeModal() {
     modal.classList.remove('active');
     gsap.to(camera.position, {
        duration: 1.5,
        x: 0, y: 0, z: 100,
        ease: "power2.inOut"
    });
}

closeModalBtn.addEventListener('click', closeModal);
window.addEventListener('click', (event) => {
    if (event.target === modal) closeModal();
});

// --- Gemini API Call ---
async function callGeminiAPI(prompt, outputElement) {
    outputElement.classList.remove('hidden');
    outputElement.innerHTML = '<p class="text-center animate-pulse">✨ جاري التفكير...</p>';
    document.querySelectorAll('.ai-button').forEach(b => b.disabled = true);

    const apiKey = "";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
    const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };

    try {
        const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!response.ok) throw new Error(`API request failed: ${response.status}`);
        const result = await response.json();
        if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
            let text = result.candidates[0].content.parts[0].text;
            text = text.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\* (.*?)(?=<br>|$)/g, '<li class="mr-4 list-disc">$1</li>');
            outputElement.innerHTML = text;
        } else { throw new Error("Invalid API response structure."); }
    } catch (error) {
        console.error("Gemini API Error:", error);
        outputElement.innerHTML = `<p class="text-red-500">عذراً، حدث خطأ. يرجى المحاولة مرة أخرى.</p>`;
    } finally {
        document.querySelectorAll('.ai-button').forEach(b => b.disabled = false);
    }
}

window.explainTask = (taskName, models) => {
    const prompt = `بصفتك خبير في الذكاء الاصطناعي، اشرح لي المهمة التالية: "${taskName}". وضح ما هو الهدف منها، وما هو نوع المدخلات والمخرجات. ثم، اذكر بإيجاز كيف تساهم النماذج التالية في تحقيق هذه المهمة: ${models}.`;
    callGeminiAPI(prompt, geminiOutputDiv);
};


window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

animate();

</script>
</body>
</html>
